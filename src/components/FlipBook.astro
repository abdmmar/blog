---
import { type HTMLAttributes } from "astro/types";

export interface Page {
  id: string;
  frontContentSlot: string;
  backContentSlot: string;
}

export interface Props extends HTMLAttributes<"div"> {
  pages: Page[];
  coverContentSlot: string;
  bookWidth?: string;
  bookHeight?: string;
  idPrefix?: string; // If you need to ensure global uniqueness beyond component scope
}

const {
  pages,
  coverContentSlot,
  bookWidth = "298px",
  bookHeight = "420px",
  // Generate a unique prefix for this component instance's IDs
  // This helps ensure checkbox IDs are unique across the entire document
  idPrefix = "flipbook-instance-" + crypto.randomUUID().slice(0, 8),
  ...rest
} = Astro.props;

const totalPages = pages.length;

const coverCheckboxId = `${idPrefix}-cover-checkbox`;
const pageCheckboxIds = pages.map(
  (page, index) => `${idPrefix}-page-${page.id}-checkbox`,
);
const pageWrapperIds = pages.map(
  (page) => `${idPrefix}-page-wrapper-${page.id}`,
);

// --- Generate dynamic CSS rules as a string ---
let dynamicStyleRules = "";

// Rule for the cover
dynamicStyleRules += `
  #${coverCheckboxId}:checked ~ .flip-book-${idPrefix} .flip-book-front-cover {
    transform: rotateY(-180deg);
    z-index: 1 !important;
  }
  /* Optional: If the whole book moves when the cover is opened */
  /* The --book-width variable is set inline on .flip-book-${idPrefix} so it's accessible here */
  /*
  #${coverCheckboxId}:checked ~ .flip-book-${idPrefix} {
    transform: translateX(calc(var(--book-width) / 2));
  }
  */
`;

// Rules for each page
pages.forEach((page, index) => {
  dynamicStyleRules += `
    #${pageCheckboxIds[index]}:checked ~ .flip-book-${idPrefix} #${pageWrapperIds[index]} {
      transform: rotateY(-180deg);
      z-index: calc(${totalPages} + 2 + ${index}) !important; /* Stack flipped pages on top */
    }
  `;
});
// --- End of dynamic CSS rules generation ---
---

<div class:list={["flip-book-outer-container", rest.class]} {...rest}>
  <input
    type="checkbox"
    id={coverCheckboxId}
    class="flip-book-checkbox-input"
  />
  {
    pages.map((page, index) => (
      <input
        type="checkbox"
        id={pageCheckboxIds[index]}
        class="flip-book-checkbox-input"
      />
    ))
  }

  <div
    class={`flip-book flip-book-${idPrefix}`}
    style={`--book-width: ${bookWidth}; --book-height: ${bookHeight}; --total-pages-val: ${totalPages};`}
  >
    <div class="flip-book-front-cover" style={`z-index: ${totalPages + 1};`}>
      <label for={coverCheckboxId} class="flip-book-label">
        <slot name={coverContentSlot} />
      </label>
    </div>

    {
      pages.map((page, index) => (
        <div
          class="flip-book-page"
          id={pageWrapperIds[index]}
          style={`z-index: ${totalPages - index}; --page-index: ${index};`}
        >
          <div class="flip-book-front-page">
            <label for={pageCheckboxIds[index]} class="flip-book-label">
              <slot name={page.frontContentSlot} />
            </label>
          </div>
          <div class="flip-book-back-page">
            <label for={pageCheckboxIds[index]} class="flip-book-label">
              <slot name={page.backContentSlot} />
            </label>
          </div>
        </div>
      ))
    }

    <div class="flip-book-back-cover" style={`z-index: 0;`}>
      <slot name="backCoverContent" />
    </div>
  </div>
</div>

{/* Inject the dynamically generated style rules */}
<Fragment set:html={`<style type="text/css">${dynamicStyleRules}</style>`} />

{/* Static styles that don't depend on dynamic selectors with generated IDs */}
<style
  define:vars={{ bookWidth_static: bookWidth, bookHeight_static: bookHeight }}
>
  .flip-book-checkbox-input {
    display: none;
  }

  .flip-book-outer-container {
    /* Styles for the outermost container if needed */
    /* e.g., display: flex; justify-content: center; */
  }

  /* Use the unique class for the flip-book div if static styles need to target it */
  /* However, most styles here are for children common to all instances */
  .flip-book {
    /* This will target any .flip-book div */
    width: var(--book-width); /* Uses inline variable */
    height: var(--book-height); /* Uses inline variable */
    position: relative;
    perspective: 2500px;
    transition: transform 1s ease-in-out;
  }

  .flip-book-front-cover,
  .flip-book-page,
  .flip-book-back-cover {
    width: 100%;
    height: 100%;
    position: absolute;
    border-radius: 2.5px 5px 5px 2.5px;
    background-color: #f9f9f9; /* Lighter default */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
    overflow: hidden;
  }

  .flip-book-front-cover {
    /* z-index is set inline for initial state */
    transform-origin: center left;
    transition:
      transform 1s ease-in-out,
      z-index 0.5s 0.5s ease-in-out;
  }

  .flip-book-label {
    /* Common style for all labels */
    display: block;
    width: 100%;
    height: 100%;
    cursor: pointer;
    user-select: none; /* Prevent text selection on click/drag */
  }

  .flip-book-page {
    /* z-index is set inline for initial state */
    transform-origin: left;
    transform-style: preserve-3d;
    transform: rotateY(0deg);
    transition:
      transform 0.8s ease-in-out,
      z-index 0.5s 0.5s ease-in-out;
  }

  .flip-book-front-page,
  .flip-book-back-page {
    width: 100%;
    height: 100%;
    position: absolute;
    backface-visibility: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box; /* Ensure padding is included in width/height */
    /* background-clip: padding-box; */ /* If you add padding and want bg to not go under border */
  }

  .flip-book-back-page {
    transform: rotateY(180deg);
  }

  .flip-book-back-cover {
    background-color: #e0e0e0;
    border-radius: 5px 2.5px 2.5px 5px;
  }

  /* Example Basic responsiveness for the book's container/scale */
  /* These are general and don't rely on the dynamic ID-based rules. */
  @media (max-width: 768px) {
    .flip-book {
      /* Targets all flip-books */
      /* Example: If width/height are absolute, scaling might be needed */
      /* If width/height use responsive units (vw, %), this might not be necessary */
      /* transform: scale(0.9); */
      /* perspective: 1800px; */
    }
  }
</style>
